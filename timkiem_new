document.addEventListener("DOMContentLoaded", function () {
        
        // üõ† H√†m chuy·ªÉn ƒë·ªïi ng√†y sang ƒë·ªãnh d·∫°ng DD/MM/YYYY
function formatDate(ngay) {
    if (!ngay) return "Kh√¥ng r√µ ng√†y"; // N·∫øu kh√¥ng c√≥ d·ªØ li·ªáu

    // ‚úÖ Tr∆∞·ªùng h·ª£p `ngay` c√≥ ƒë·ªãnh d·∫°ng 'YYYY-MM-DD'
    if (ngay.includes("-")) {
        return new Date(ngay).toLocaleDateString("vi-VN", {
            day: "2-digit",
            month: "2-digit",
            year: "numeric"
        });
    }

    // ‚úÖ Tr∆∞·ªùng h·ª£p `ngay` c√≥ ƒë·ªãnh d·∫°ng 'YYYYMMDD'
    if (ngay.length === 8) {
        return `${ngay.substring(6, 8)}/${ngay.substring(4, 6)}/${ngay.substring(0, 4)}`;
    }

    return ngay; // Tr·∫£ v·ªÅ nguy√™n tr·∫°ng n·∫øu kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng n√†o
}
    const searchButton = document.getElementById("searchButton");
    const maTheBHYTInput = document.getElementById("maTheBHYTInput");
    const hotenTInput = document.getElementById("hotenTInput");
    const namsinhTInput = document.getElementById("namsinhTInput");
    const searchMessage = document.getElementById("searchMessage");
    const resultTableBody = document.querySelector("#resultTable tbody");

    searchButton.addEventListener("click", async (event) => {
        event.preventDefault();

        const hoten = hotenTInput.value.trim();
        const namsinh = namsinhTInput.value.trim();
        const maTheBHYT = maTheBHYTInput.value.trim();

        resultTableBody.innerHTML = "";
        searchMessage.textContent = "ƒêang t√¨m ki·∫øm d·ªãch v·ª•...";

        if (!maTheBHYT && !hoten && !namsinh) {
            searchMessage.textContent = "Vui l√≤ng nh·∫≠p h·ªç t√™n, s·ªë BHYT ho·∫∑c ng√†y/th√°ng/nƒÉm sinh.";
            return;
        }

        try {
            const response = await fetch("https://my-firstluan-worker.luanvv-ndh2.workers.dev", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ ho_ten: hoten, ngay_sinh: namsinh, ma_the_bhyt: maTheBHYT }),
            });

            if (!response.ok) {
                const errorText = await response.text();
                throw new Error(`L·ªói k·∫øt n·ªëi ƒë·∫øn Worker: ${errorText}`);
            }

            const data = await response.json();

            if (data && Array.isArray(data) && data.length > 0) {
                searchMessage.textContent = `T√¨m th·∫•y ${data.length} k·∫øt qu·∫£.`;

                const groupedData = {};
                data.forEach(item => {
                    const ngayXetNghiem = item.ngay ?? "Kh√¥ng r√µ ng√†y";
                    if (!groupedData[ngayXetNghiem]) {
                        groupedData[ngayXetNghiem] = [];
                    }
                    groupedData[ngayXetNghiem].push(item);
                });

                let stt = 1; // ƒê√°nh s·ªë th·ª© t·ª± t·ª´ng d√≤ng



                for (const [ngay, records] of Object.entries(groupedData)) {
                    const ngayRow = document.createElement("tr");
                  // üñ•Ô∏è Hi·ªÉn th·ªã ng√†y trong b·∫£ng
ngayRow.innerHTML = `<td colspan="9" style="background-color:#f0f0f0; font-weight:bold; text-align:center;">
    Ng√†y: ${formatDate(ngay)}
</td>`
                    resultTableBody.appendChild(ngayRow);

                    records.forEach(record => {
                        const row = document.createElement("tr");
                        row.innerHTML = `
                            <td>${stt++}</td>
                            <td>${record.ma_dich_vu ?? ""}</td>
                            <td>${record.ten_chi_so ?? ""}</td>
                            <td>${record.gia_tri ?? ""}</td>
                            <td>${record.ket_luan ?? ""}</td>
                            <td>${record.ten_thuoc ?? ""}</td>
                            <td>${record.ham_luong ?? ""}</td>
                            <td>${record.so_luong ?? ""}</td>
                            <td>${record.don_vi_tinh ?? ""}</td>
                        `;
                        resultTableBody.appendChild(row);
                    });
                }
            } else {
                searchMessage.textContent = "Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ ph√π h·ª£p.";
            }
        } catch (error) {
            console.error("L·ªói:", error);
            searchMessage.textContent = "ƒê√£ x·∫£y ra l·ªói khi t√¨m ki·∫øm.";
        }
    });
});



export default {
    async fetch(request, env) {
        try {
            // ‚úÖ X·ª≠ l√Ω Preflight Request (CORS - OPTIONS)
            if (request.method === "OPTIONS") {
                return new Response(null, {
                    status: 204,
                    headers: {
                        "Access-Control-Allow-Origin": "*",
                        "Access-Control-Allow-Methods": "GET, POST, OPTIONS",
                        "Access-Control-Allow-Headers": "Content-Type, Authorization, apikey"
                    }
                });
            }

            // ‚úÖ Ch·ªâ ch·∫•p nh·∫≠n ph∆∞∆°ng th·ª©c POST
            if (request.method !== "POST") {
                return new Response(JSON.stringify({ error: "Only POST requests are allowed" }), {
                    status: 405,
                    headers: { "Content-Type": "application/json", "Access-Control-Allow-Origin": "*" }
                });
            }

            // ‚úÖ L·∫•y d·ªØ li·ªáu t·ª´ request
            const { ho_ten, ngay_sinh, ma_the_bhyt } = await request.json();
            console.log("üì• D·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c:", JSON.stringify({ ho_ten, ngay_sinh, ma_the_bhyt }));

            // ‚úÖ Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o (√≠t nh·∫•t m·ªôt tr∆∞·ªùng ph·∫£i c√≥ d·ªØ li·ªáu)
            if (!ho_ten && !ngay_sinh && !ma_the_bhyt) {
                return new Response(JSON.stringify({ error: "Vui l√≤ng nh·∫≠p √≠t nh·∫•t m·ªôt th√¥ng tin ƒë·ªÉ t√¨m ki·∫øm!" }), {
                    status: 400,
                    headers: { "Content-Type": "application/json", "Access-Control-Allow-Origin": "*" }
                });
            }

            // ‚úÖ G·ª≠i request ƒë·∫øn Supabase
            const response = await fetch(`${env.SUPABASE_URL}/rest/v1/rpc/tim_kiem_thong_tin_chung3`, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    apikey: env.SUPABASE_KEY,
                    Authorization: `Bearer ${env.SUPABASE_KEY}`
                },
                body: JSON.stringify({
                    ho_ten: ho_ten || null,
                    ngay_sinh: ngay_sinh || null,
                    ma_the_bhyt: ma_the_bhyt || null
                })
            });

            console.log("üì§ Ph·∫£n h·ªìi t·ª´ Supabase:", response.status);

            // ‚úÖ Ki·ªÉm tra ph·∫£n h·ªìi t·ª´ Supabase
            if (!response.ok) {
                const errorResponse = await response.text();
                return new Response(JSON.stringify({ error: "L·ªói t·ª´ Supabase!", details: errorResponse }), {
                    status: response.status,
                    headers: { "Content-Type": "application/json", "Access-Control-Allow-Origin": "*" }
                });
            }

            // ‚úÖ L·∫•y d·ªØ li·ªáu t·ª´ Supabase & tr·∫£ v·ªÅ k·∫øt qu·∫£
            const data = await response.json();
            return new Response(JSON.stringify(data), {
                status: 200,
                headers: {
                    "Content-Type": "application/json",
                    "Access-Control-Allow-Origin": "*",
                    "Access-Control-Allow-Methods": "GET, POST, OPTIONS",
                    "Access-Control-Allow-Headers": "Content-Type, Authorization, apikey"
                }
            });

        } catch (error) {
            console.error("‚ùå L·ªói x·ª≠ l√Ω request:", error);
            return new Response(JSON.stringify({ error: "L·ªói x·ª≠ l√Ω request!", details: error.message }), {
                status: 500,
                headers: { "Content-Type": "application/json", "Access-Control-Allow-Origin": "*" }
            });
        }
    }
};
